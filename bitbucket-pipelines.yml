image: atlassian/default-image:2


definitions:
  
  steps:

    step: &make-envs-test
      name: make-envs-test
      deployment: test
      script:
        #Creación de .env del docker-composer
        - echo REMOTE_PATH_VOLUME=${REMOTE_PATH_VOLUME}        > .env-var
        - echo REMOTE_PATH_DOCKER=${REMOTE_PATH_DOCKER}       >> .env-var
        - echo CONTAINER_NAME=${CONTAINER_NAME}               >> .env-var
        - echo SERVER_DEST=${SERVER_DEST}                     >> .env-var
        - echo AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}         >> .env-var 
        - echo AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} >> .env-var
        - echo AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}       >> .env-var
        - echo PROFILE_NAME=${PROFILE_NAME}                   >> .env-var 
        - echo ID_ACCOUNT_SSL=${ID_ACCOUNT_SSL}               >> .env-var
        - echo S3_NAME_SSL=${S3_NAME_SSL}                     >> .env-var

      artifacts:
        - .env-var

    step: &download-ssl-test
      image: atlassian/pipelines-awscli
      name: download-ssl-test
      script:
        - source .env-var
        
        #Logging AWS
        - aws configure set aws_access_key_id "${AWS_ACCESS_KEY_ID}"
        - aws configure set aws_secret_access_key "${AWS_SECRET_ACCESS_KEY}"
        - aws configure set default.region "${AWS_DEFAULT_REGION}"

        #Set profile AWS
        - aws configure set aws_access_key_id "${AWS_ACCESS_KEY_ID}" --profile $PROFILE_NAME
        - aws configure set aws_secret_access_key "${AWS_SECRET_ACCESS_KEY}" --profile $PROFILE_NAME
        - aws configure set default.region "${AWS_DEFAULT_REGION}" --profile $PROFILE_NAME
        - aws configure set role_arn arn:aws:iam::${ID_ACCOUNT_SSL}:role/${PROFILE_NAME} --profile $PROFILE_NAME
        - aws configure set source_profile $PROFILE_NAME --profile $PROFILE_NAME

        # Download SSL Certs
        - aws s3 cp s3://$S3_NAME_SSL/probemos.dev/star.probemos.dev.crt docker/test/certs/probemos.dev/ --profile $PROFILE_NAME
        - aws s3 cp s3://$S3_NAME_SSL/probemos.dev/star.probemos.dev.key docker/test/certs/probemos.dev/ --profile $PROFILE_NAME

      artifacts:
        - .env-var
        - docker/test/certs/**

    step: &rsync-test
      name: rsync-test
      script:
        - source .env-var
        - pipe: atlassian/rsync-deploy:0.4.4
          variables:
            USER: "ubuntu"
            SERVER: $SERVER_DEST
            REMOTE_PATH: $REMOTE_PATH_VOLUME
            LOCAL_PATH: "./"
            DEBUG: "true"
            EXTRA_ARGS: "-zrSlh --stats --exclude-from=exclude-list.txt --chmod=775 --chown=ubuntu:www-data"
      artifacts:
        - .env-var

    step: &copy-env-test
      name: copy-env-test
      script:
        #Creación de .env de app
        - source .env-var
        - pipe: atlassian/ssh-run:0.3.0
          variables:
            SSH_USER: "ubuntu"
            SERVER: $SERVER_DEST
            COMMAND: 'cp ${REMOTE_PATH_VOLUME}.env-test ${REMOTE_PATH_VOLUME}.env'
      artifacts:
        - .env-var  

    step: &start-docker-test
      name: start-docker-test
      script:
        - source .env-var
        
        - scp .env-var ubuntu@${SERVER_DEST}:${REMOTE_PATH_DOCKER}test/.env
        - scp -r ./docker/test/* ubuntu@${SERVER_DEST}:${REMOTE_PATH_DOCKER}test/

        #Reinicio de instancia de docker
        - ssh ubuntu@${SERVER_DEST} docker-compose -f ${REMOTE_PATH_DOCKER}test/docker-compose.yml down
        - ssh ubuntu@${SERVER_DEST} docker-compose -f ${REMOTE_PATH_DOCKER}test/docker-compose.yml up -d --build
      artifacts:
        - .env-var

    step: &npm-install-test
      name: npm-install-test
      script:
        - source .env-var
        - pipe: atlassian/ssh-run:0.3.0
          variables:
            SSH_USER: "ubuntu"
            SERVER: $SERVER_DEST
            COMMAND: "docker exec -ti ${CONTAINER_NAME} npm install"
      artifacts:
        - .env-var 

    step: &set-perms-test
      name: set-perms-test
      script:
      - source .env-var
      - pipe: atlassian/ssh-run:0.3.0
        variables:
          SSH_USER: "ubuntu"
          SERVER: $SERVER_DEST
          COMMAND: "sudo chown -R ubuntu:www-data ${REMOTE_PATH_VOLUME}; sudo chmod -R 775 ${REMOTE_PATH_VOLUME}"
      artifacts:
        - .env-var

    step: &npm-start-pm2-test
      name: npm-start-pm2
      script:
        - source .env-var
        - pipe: atlassian/ssh-run:0.3.0
          variables:
            SSH_USER: "ubuntu"
            SERVER: $SERVER_DEST
            COMMAND: "docker exec -ti ${CONTAINER_NAME}  pm2 --name ${CONTAINER_NAME} start server.js"
      artifacts:
        - .env-var
#   #manual deploy-test

pipelines:
  custom:
    deploy-test-full:
      - step: *make-envs-test
      - step: *download-ssl-test
      - step: *set-perms-test
      - step: *rsync-test
      - step: *copy-env-test
      - step: *start-docker-test
      - step: *npm-install-test
      - step: *set-perms-test
      - step: *npm-start-pm2-test
